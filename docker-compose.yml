version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15
    container_name: nsfw-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nsfw_db
      POSTGRES_USER: nsfw
      POSTGRES_PASSWORD: nsfw123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - nsfw-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nsfw -d nsfw_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: nsfw-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - nsfw-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NSFW-Go API 服务 (开发环境)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: nsfw-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NSFW_DATABASE_HOST=postgres
      - NSFW_DATABASE_PORT=5432
      - NSFW_DATABASE_USER=nsfw
      - NSFW_DATABASE_PASSWORD=nsfw123
      - NSFW_DATABASE_DBNAME=nsfw_db
      - NSFW_REDIS_HOST=redis
      - NSFW_REDIS_PORT=6379
      - NSFW_SERVER_HOST=0.0.0.0
      - NSFW_SERVER_PORT=8080
      - NSFW_SERVER_MODE=debug
      - NSFW_LOG_LEVEL=debug
    volumes:
      - .:/app
      - /MediaCenter:/app/media:ro  # 只读挂载媒体库
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nsfw-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: nsfw-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./web/dist:/var/www/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - nsfw-network

  # Telegram Bot (可选)
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: bot
    container_name: nsfw-bot
    restart: unless-stopped
    environment:
      - NSFW_DATABASE_HOST=postgres
      - NSFW_DATABASE_PORT=5432
      - NSFW_DATABASE_USER=nsfw
      - NSFW_DATABASE_PASSWORD=nsfw123
      - NSFW_DATABASE_DBNAME=nsfw_db
      - NSFW_REDIS_HOST=redis
      - NSFW_REDIS_PORT=6379
      - NSFW_BOT_ENABLED=false
      - NSFW_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nsfw-network
    profiles:
      - bot  # 只有在指定 --profile bot 时才启动

  # pgAdmin (数据库管理界面)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nsfw-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@nsfw.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - nsfw-network
    profiles:
      - admin  # 只有在指定 --profile admin 时才启动

  # Redis Commander (Redis管理界面)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nsfw-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - nsfw-network
    profiles:
      - admin

  # Prometheus 监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: nsfw-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - nsfw-network
    profiles:
      - monitoring

  # Grafana 仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: nsfw-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - nsfw-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  nsfw-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 